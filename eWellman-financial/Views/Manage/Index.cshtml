@model eWellman_financial.Models.View_Models.IndexViewModel
@{
	ViewBag.Title = "Manage";
}

<div class="toaster" id="passwordToast">Password Updated!</div>
<div>
	<h4>Change your account settings</h4>
	<hr />
	<div class="row">
		<div class="ml-3 col-md-4">
			<div class="row">
				<a href="#" id="updatePasswordLink">Update Password</a>
			</div>
			<div class="row">
				<a href="#" id="updateEmailLink">Update Email</a>
			</div>
			<div class="row mt-5">
				@using (Html.BeginForm("LeaveHousehold", "Household", FormMethod.Post, new { role = "form", id = "leaveForm"})) {
					<button id="leaveBtn" class="btn-link" type="submit" style="cursor:pointer; margin-left:-8px; margin-top:-10px;">Leave Household</button>
				}
			</div>
		</div>
		<!--External logins, implement later-->
		<!--<dt>External Logins:</dt>
		<dd>
			@@Model.Logins.Count [
			@@Html.ActionLink("Manage", "ManageLogins") ]
		</dd>
		@*
			Phone Numbers can used as a second factor of verification in a two-factor authentication system.

			 See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
				for details on setting up this ASP.NET application to support two-factor authentication using SMS.

			 Uncomment the following block after you have set up two-factor authentication
		*@
		@*
			<dt>Phone Number:</dt>
			<dd>
				@(Model.PhoneNumber ?? "None")
				@if (Model.PhoneNumber != null)
				{
					<br />
					<text>[&nbsp;&nbsp;@Html.ActionLink("Change", "AddPhoneNumber")&nbsp;&nbsp;]</text>
					using (Html.BeginForm("RemovePhoneNumber", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
					{
						@Html.AntiForgeryToken()
						<text>[<input type="submit" value="Remove" class="btn-link" />]</text>
					}
				}
				else
				{
					<text>[&nbsp;&nbsp;@Html.ActionLink("Add", "AddPhoneNumber")
				}
			</dd>
		*@
		<dt>Two-Factor Authentication:</dt>
		<dd>
			<p>
				There are no two-factor authentication providers configured. See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
				for details on setting up this ASP.NET application to support two-factor authentication.
			</p>
			@*@if (Model.TwoFactor)
				{
					using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
					{
						@Html.AntiForgeryToken()
						<text>Enabled
						<input type="submit" value="Disable" class="btn btn-link" />
						</text>
					}
				}
				else
				{
					using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
					{
						@Html.AntiForgeryToken()
						<text>Disabled
						<input type="submit" value="Enable" class="btn btn-link" />
						</text>
					}
				}*@
		</dd>-->

		<div class="col-md-6">
			<div id="updatePasswordDiv" style="display:none">
				@using (Html.BeginForm("ChangePassword", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "passwordUpdateForm" })) {
					@Html.AntiForgeryToken()
					@Html.ValidationSummary("", new { @class = "text-danger" })
					<div class="form-group">
						@Html.Label("OldPassword", "Old Password", new { @class = "control-label" })
						<div class="col-md-12">
							@Html.Password("OldPassword", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("NewPassword","New Password", new { @class = "control-label" })
						<div class="col-md-12">
							@Html.Password("NewPassword", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("ConfirmPassword", "Confirm Password", new { @class = "control-label" })
						<div class="col-md-12">
							@Html.Password("ConfirmPassword", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-offset-2 col-md-10">
							<input type="submit" value="Update Password" class="btn btn-primary" />
						</div>
					</div>
			}
			</div>
			<div id="updateEmailDiv" style="display:none">
				@using (Html.BeginForm("ChangeEmail", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "emailUpdateForm" })) {
					@Html.AntiForgeryToken()
					@Html.ValidationSummary(true, "", new { @class = "text-danger" })
					<div class="form-group">
						<label for="oldEmail">Old Email Address</label>
						<div class="col-md-12">
							@Html.TextBox("oldEmail", null, new { @class = "form-control" })
							@Html.ValidationMessage("oldEmail", "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="form-group">
						<label for="newEmail">New Email Address</label>
						<div class="col-md-12">
							@Html.TextBox("newEmail", null, new { @class = "form-control" })
							@Html.ValidationMessage("newEmail", "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="form-group">
						<label for="confirmEmail">Confirm New Email Address</label>
						<div class="col-md-12">
							@Html.TextBox("confirmEmail", null, new { @class = "form-control" })
							@Html.ValidationMessage("confirmEmail", "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-offset-2 col-md-10">
							<input type="submit" value="Update" class="btn btn-default" />
						</div>
					</div>
				}
			</div>
		</div>
	</div>
</div>



<script>
	$("#updatePasswordLink").click(function (event) {
		$("#updatePasswordDiv").fadeToggle("fast");
		$("#passwordUpdateForm :input:enabled:visible:first").focus();
	});
</script>
<script>
	$("#updateEmailLink").click(function (event) {
		$("#updateEmailDiv").fadeToggle("fast");
		$("#emailUpdateForm :input:enabled:visible:first").focus();
	});
</script>
<script>
	$(function () {
		$("form").submit(function (event) {
			event.preventDefault(); // Prevent the form from submitting via the browser
			var form = $(this);
			$.ajax({
				type: form.attr('method'),
				url: form.attr('action'),
				data: form.serialize(),
				success: function (response) {
					$(form).find("input[type!=submit]").val('');
					$(form).closest('div').fadeToggle("fast");
					if (response.success) {
						$.toast({
							text: response.text, // Text that is to be shown in the toast
							icon: 'success', // Type of toast icon
							showHideTransition: 'slide', // fade, slide or plain
							allowToastClose: true, // Boolean value true or false
							hideAfter: 3500, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
							stack: false, // false if there should be only one toast at a time or a number representing the maximum number of toasts to be shown at a time
							position: 'top-center', // bottom-left or bottom-right or bottom-center or top-left or top-right or top-center or mid-center or an object representing the left, right, top, bottom values
							textAlign: 'left',  // Text alignment i.e. left, right or center
							loader: true,  // Whether to show loader or not. True by default
							loaderBg: '#9EC600',  // Background color of the toast loader
							beforeShow: function () { }, // will be triggered before the toast is shown
							afterShown: function () { }, // will be triggered after the toat has been shown
							beforeHide: function () { }, // will be triggered before the toast gets hidden
							afterHidden: function () { }  // will be triggered after the toast has been hidden
						});
					}
					else {
						$.toast({
							text: response.text, // Text that is to be shown in the toast
							icon: 'warning', // Type of toast icon
							showHideTransition: 'slide', // fade, slide or plain
							allowToastClose: true, // Boolean value true or false
							hideAfter: 3500, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
							stack: false, // false if there should be only one toast at a time or a number representing the maximum number of toasts to be shown at a time
							position: 'top-center', // bottom-left or bottom-right or bottom-center or top-left or top-right or top-center or mid-center or an object representing the left, right, top, bottom values
							textAlign: 'left',  // Text alignment i.e. left, right or center
							loader: true,  // Whether to show loader or not. True by default
							loaderBg: '#d95351',  // Background color of the toast loader
							beforeShow: function () { }, // will be triggered before the toast is shown
							afterShown: function () { }, // will be triggered after the toat has been shown
							beforeHide: function () { }, // will be triggered before the toast gets hidden
							afterHidden: function () { }  // will be triggered after the toast has been hidden
						});
					}
				}
			}).done(function (data) {
				$("#atfArea").load('@Url.Action("_AFTPartial", "Manage", null)');
			}).fail(function (data) {
			});
		});
	});
</script>